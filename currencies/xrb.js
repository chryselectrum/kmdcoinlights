// Generated by CoffeeScript 2.2.0
var XRB;

function getTime(){
    return new Date(Date.now());
}

function onMessage (txCb, blockCb, socket) {
	
	console.log(socket);
	socket.on('connect', function () {
		console.log('connected: ' + socket.io.uri);
		socket.emit('subscribe', 'inv');
		socket.emit('subscribe', 'sync');
	});
	socket.on('block', function (block) {
		//console.log('onBlock event fired: ' + socket.io.uri + ', ' + getTime() + ', ' + block);		
		blockCb({ count: block ? block.length : 0 });
	});
	socket.on('tx', function (payload) {
		//console.log('onTx event fired: ' + socket.io.uri + ', ' + getTime() + ', vout: ' + payload.valueOut);		
		//console.log(payload);
		txCb({
			amount: !isNaN(parseFloat(payload.valueOut)) && isFinite(payload.valueOut) ? payload.valueOut : 0,
			fee: 0, // Math.random() * Math.abs(this.txFees[0] - this.txFees[1]) + Math.min.apply(0, this.txFees),
			link: this.baseURL + 'tx/' + payload.txid,
			donation: !!payload.vout.find((vout) => {
			  return Object.keys(vout)[0] === this.donationAddress;
			})
		});				
	});
}

XRB = class XRB {
  constructor() {
    this.baseUrls = ['http://txscl000.meshbits.io','http://txscl001.meshbits.io/','http://txscl002.meshbits.io/','http://txscl003.meshbits.io/','http://txscl004.meshbits.io/','http://txscl005.meshbits.io/','http://txscl006.meshbits.io/','http://txscl007.meshbits.io/', 'https://kmdexplorer.ru/'];
	//this.baseUrls = ['https://kmd.explorer.supernet.org/'];	
		
    this.ws = null;    
    this.txApi = this.baseUrl + "api/tx/";
    this.blockApi = this.baseUrl + "api/block/";
    this.txFees = [0.000224, 0.0005];
    this.txFeeTimestamp = 0;
    this.txFeeInterval = 3000; // how often to query for a fee
    this.donationAddress = "LiVcWyeoPXNYekcdFkDr64QLG3u9G8BgLs";
	this.sockets = [];
  }    

  start(txCb, blockCb) {    
		
	var baseLength = this.baseUrls.length;		
	for (var i = 0; i < baseLength; i++) {	
		//console.log('i: ' + i + ', baseUrl: ' + this.baseUrls[i]);				
		var socket = io(this.baseUrls[i], { forceNew: true } );
		onMessage(txCb, blockCb, socket);				
		this.sockets[i] = socket;
	}			
  }

  stop() {
	  
    for (var i = 0; i < this.baseUrls.length; i++)
		if (this.sockets[i]) this.sockets[i].emit('end');		
  }

};

//# sourceMappingURL=xrb.js.map
