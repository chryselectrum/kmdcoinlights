// Generated by CoffeeScript 2.2.0
var CanvasRenderer;

CanvasRenderer = class CanvasRenderer {
  constructor(c) {
    this.c = c;
    this.ctx = this.c.getContext('2d');
    this.resize(this.c);
    this.minFps = 45;
    this.particleMax = 150;
    this.meteorMax = 100;
    this.meteors = [];
    this.blocks = [];
    this.particles = [];
    this.running = false;
    this.lastDraw = Date.now();
    this.c.addEventListener('click', this.handleClick.bind(this));
    this.render();
  }

  start() {
    return this.running = true;
  }

  stop() {
    return this.running = false;
  }

  resize(c) {
    this.c = c;
    this.cw = this.c.width = this.c.scrollWidth;
    this.ch = this.c.height = this.c.scrollHeight;
    return this.ctx.lineCap = 'round';
  }

  rand(a, b) {
    return ~~((Math.random() * (b - a + 1)) + a);
  }

  addBlock(thickness) {
    if (this.blocks.length >= 5 || !this.running) {
      return;
    }
    return this.blocks.push({
      y: -50,
      speed: 5,
      hue: 190,
      alpha: .5,
      thickness: Math.round(thickness)
    });
  }

  updateBlocks() {
    var block, i, results;
    i = this.blocks.length;
    results = [];
    while (i--) {
      block = this.blocks[i];
      block.y = Math.round(block.y + block.speed);
      if (block.y / this.ch > 0.75) {
        block.alpha = Math.max(0, 1 - (4 * block.y / this.ch - 3)) / 2;
      }
      if (block.y > this.ch) {
        results.push(this.blocks.splice(i, 1));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  renderBlocks() {
    var block, i, results;
    i = this.blocks.length;
    results = [];
    while (i--) {
      block = this.blocks[i];
      this.ctx.beginPath();
      this.ctx.moveTo(20, block.y);
      this.ctx.lineTo(this.cw - 20, block.y);
      this.ctx.lineWidth = block.thickness;
      this.ctx.strokeStyle = 'hsla(' + block.hue + ', 80%, 50%, ' + block.alpha + ')';
      this.ctx.stroke();
      this.ctx.closePath();
      results.push(this.ctx.restore());
    }
    return results;
  }

  createBlockParticles() {
    var block, i, results;
    i = this.blocks.length;
    results = [];
    while (i--) {
      block = this.blocks[i];
      results.push(this.particles.push({
        x: Math.round(this.rand(20, this.cw - 20)),
        y: block.y - 10,
        vx: (this.rand(0, 100) - 50) / 100,
        vy: (this.rand(-50, 50) - 50) / 100,
        radius: Math.round(this.rand(2, 6) / 2),
        alpha: this.rand(50, 75) / 100,
        hue: block.hue,
        light: 50
      }));
    }
    return results;
  }

  handleClick({pageX, pageY}) {
    var cx, cy, j, len, link, ref, results, t, thickness, x, y;
    cx = pageX - this.c.getBoundingClientRect().left;
    cy = pageY - this.c.getBoundingClientRect().top;
    ref = this.meteors.reverse();
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ({x, y, thickness, link} = ref[j]);
      t = thickness * 2;
      if (cx >= x - t && cx <= x + t && cy >= y - t && cy <= y + t) {
        window.open(link);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  addMeteor({speed, hue, thickness, length, link, donation}) {
    if (!this.running) {
      return;
    }
    if ((this.meteors.length >= this.meteorMax || this.currentFps < this.minFps) && !donation) {
      return;
    }
    this.meteors.push({
      x: Math.round(this.rand(thickness, this.cw - thickness)),
      y: -50,
      vy: donation ? speed * 0.8 : speed,
      hue: Math.round(hue),
      thickness: donation ? Math.max(20, thickness * 2) : thickness,
      length: Math.max(length, 10),
      alpha: 1,
      timestamp: new Date().getTime(),
      link: link,
      donation: donation
    });
    return this.meteors.sort(function(a, b) {
      return a.thickness - b.thickness;
    });
  }

  updateMeteor(meteor) {
    if (meteor.x < meteor.thickness) {
      meteor.x = Math.round(this.rand(meteor.thickness, this.cw - meteor.thickness));
    }
    meteor.y = Math.round(meteor.y + meteor.vy);
    if (meteor.donation) {
      meteor.hue = meteor.hue + 3 % 360;
    }
    if (meteor.y / this.ch > 0.75) {
      meteor.alpha = Math.max(0, 1 - (4 * meteor.y / this.ch - 3));
      if (meteor.thickness > 5) {
        return meteor.thickness -= 0.05;
      }
    }
  }

  renderMeteor(meteor) {
    var gradient1;
    this.ctx.save();
    this.ctx.globalAlpha = meteor.alpha;
    this.ctx.translate(meteor.x, meteor.y);
    this.ctx.beginPath();
    this.ctx.moveTo(0, 0);
    this.ctx.lineTo(0, -meteor.length);
    this.ctx.lineWidth = meteor.thickness;
    gradient1 = this.ctx.createLinearGradient(0, 0, 0, -meteor.length);
    gradient1.addColorStop(0, 'hsla(' + meteor.hue + ', 60%, 50%, .25)');
    gradient1.addColorStop(1, 'hsla(' + meteor.hue + ', 60%, 50%, 0)');
    this.ctx.strokeStyle = gradient1;
    this.ctx.stroke();
    this.ctx.closePath();
    return this.ctx.restore();
  }

  renderMeteorBorder(meteor) {
    var gradient2;
    this.ctx.save();
    this.ctx.globalAlpha = meteor.alpha;
    this.ctx.translate(meteor.x, meteor.y);
    this.ctx.beginPath();
    this.ctx.moveTo(0, 0);
    this.ctx.lineTo(0, -meteor.length);
    this.ctx.lineWidth = Math.round(meteor.thickness / 5);
    gradient2 = this.ctx.createLinearGradient(0, meteor.thickness, 0, -meteor.length);
    gradient2.addColorStop(0, 'hsla(' + meteor.hue + ', 100%, 50%, 0)');
    gradient2.addColorStop(.1, 'hsla(' + meteor.hue + ', 100%, 100%, .75)');
    gradient2.addColorStop(1, 'hsla(' + meteor.hue + ', 100%, 50%, 0)');
    this.ctx.strokeStyle = gradient2;
    this.ctx.stroke();
    this.ctx.closePath();
    return this.ctx.restore();
  }

  renderMeteorFlare(meteor) {
    var gradient3;
    this.ctx.save();
    this.ctx.globalAlpha = meteor.alpha;
    this.ctx.translate(meteor.x, meteor.y + meteor.thickness * .5);
    this.ctx.beginPath();
    this.ctx.arc(0, 0, meteor.thickness, 0, Math.PI * 2, false);
    gradient3 = this.ctx.createRadialGradient(0, 0, 0, 0, 0, meteor.thickness);
    gradient3.addColorStop(0, 'hsla(' + (meteor.hue + 30) % 360 + ', 100%, 50%, .2)');
    gradient3.addColorStop(1, 'hsla(' + (meteor.hue + 30) % 360 + ', 50%, 50%, 0)');
    this.ctx.fillStyle = gradient3;
    this.ctx.fill();
    this.ctx.closePath();
    return this.ctx.restore();
  }

  renderMeteorFlare2(meteor) {
    var gradient4;
    this.ctx.save();
    this.ctx.globalAlpha = meteor.alpha;
    this.ctx.translate(meteor.x, meteor.y);
    this.ctx.scale(1, 1.5);
    this.ctx.beginPath();
    this.ctx.arc(0, 0, meteor.thickness / 2, 0, Math.PI * 2, false);
    gradient4 = this.ctx.createRadialGradient(0, 0, 0, 0, 0, meteor.thickness / 2);
    gradient4.addColorStop(0, 'hsla(' + (meteor.hue + 60) % 360 + ', 80%, 70%, .1)');
    gradient4.addColorStop(1, 'hsla(' + (meteor.hue + 60) % 360 + ', 80%, 50%, 0)');
    this.ctx.fillStyle = gradient4;
    this.ctx.fill();
    this.ctx.closePath();
    return this.ctx.restore();
  }

  createParticles(meteor) {
    if (meteor.donation || (this.particles.length < this.particleMax - this.meteors.length && meteor.thickness > 5)) {
      return this.particles.push({
        x: meteor.x + (this.rand(0, meteor.thickness) - meteor.thickness / 2),
        y: meteor.y + (this.rand(0, meteor.thickness) - meteor.thickness / 2),
        vx: (this.rand(0, 100) - 50) / 100,
        vy: (this.rand(-25, 75) - 50) / 100,
        radius: meteor.donation ? meteor.thickness * 0.2 : Math.round(this.rand(1, 6) / 2),
        alpha: meteor.donation ? 0.5 : this.rand(15, 30) / 100,
        hue: meteor.hue,
        light: meteor.donation ? 0 : 50
      });
    }
  }

  updateParticles() {
    var i, p, results;
    i = this.particles.length;
    results = [];
    while (i--) {
      p = this.particles[i];
      p.vx += (this.rand(0, 100) - 50) / 300;
      p.vy += (this.rand(-25, 75) - 50) / 300;
      p.x += p.vx;
      p.y += p.vy;
      p.light += 2;
      p.alpha -= .01;
      if (p.alpha < .02) {
        results.push(this.particles.splice(i, 1));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  renderParticles() {
    var i, p, results;
    i = this.particles.length;
    results = [];
    while (i--) {
      p = this.particles[i];
      this.ctx.beginPath();
      this.ctx.fillStyle = 'hsla(' + p.hue + ', 100%, ' + p.light + '%, ' + p.alpha + ')';
      this.ctx.fillRect(Math.round(p.x), Math.round(p.y), p.radius, p.radius);
      results.push(this.ctx.closePath());
    }
    return results;
  }

  clear() {
    this.ctx.globalCompositeOperation = 'destination-out';
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.25)';
    this.ctx.fillRect(0, 0, this.cw, this.ch);
    return this.ctx.globalCompositeOperation = 'lighter';
  }

  render() {
    var i, meteor;
    requestAnimationFrame(this.render.bind(this));
    if (!this.running) {
      return;
    }
    this.currentFps = Math.round(1000 / (Date.now() - this.lastDraw));
    this.lastDraw = Date.now();
    this.clear();
    // debug
    //@ctx.font = '48px serif';
    //@ctx.fillStyle = 'rgba(255, 255, 255, 1)'
    //@ctx.fillText(@currentFps, 10, 50);
    // blocks
    this.updateBlocks();
    this.renderBlocks();
    this.createBlockParticles();
    // meteors
    i = this.meteors.length;
    while (i--) {
      meteor = this.meteors[i];
      if (new Date().getTime() - meteor.timestamp > 15 * 1000 || meteor.y - meteor.length > this.ch) {
        this.meteors.splice(i, 1);
        continue;
      }
      this.updateMeteor(meteor);
      this.renderMeteor(meteor);
      this.renderMeteorBorder(meteor);
      this.renderMeteorFlare(meteor);
      this.renderMeteorFlare2(meteor);
      this.createParticles(meteor);
    }
    // meteor particles
    this.updateParticles();
    return this.renderParticles();
  }

};

//# sourceMappingURL=engine.js.map
